syntax = "proto3";

option java_multiple_files = true;
option java_package = "it.unibo.tuprolog.solve.lpaas";
option java_outer_classname = "LPaaS";

package lpaas;

/* Solver Service & Messages*/

service Solver {
  rpc Solve(SolveRequest) returns (SolutionSequence) {}
  rpc GetSolution(stream SolutionID) returns (stream SolutionReply) {}
  /*rpc WriteOnInputChannel(stream WrittenLine) {}
  rpc ReadFromOutputChannel(SolverID) returns (stream ReadLine) {}
  rpc GetFlags(SolverID) returns (Flags) {}
  rpc GetStaticKB(SolverID) returns (stream Clause) {}
  rpc GetDynamicKB(SolverID) returns (stream Clause) {}
  rpc GetLibraries(SolverID) returns (Runtime) {}
  rpc GetUnificator(SolverID) returns (Unificator) {}
  rpc GetOperators(SolverID) returns (OperatorSet) {}
  rpc GetInputChannels(SolverID) returns (ChannelID) {}
  rpc GetOutputChannels(SolverID) returns (ChannelID) {}*/
}

/* Request messages */

message SolveRequest {
  optional string solverID = 1;
  string struct = 2;
  repeated Options options = 3;
}

message Options {
  string name = 1;
  optional int64 value = 2;
}

message SolutionID {
  string solverID = 1;
  string computationID = 2;
  string query = 3;
  int32 index = 4;
}

/* Reply messages */

message SolutionSequence {
  string solverID = 1;
  string computationID = 2;
  string query = 3;
}

message SolutionReply {
  bool isYes = 4;
  bool isNo = 5;
  bool isHalt = 6;
  string query = 1;
  repeated Substitution substitution = 3;
  optional string error = 7;
}

message Substitution {
  string var = 1;
  string term = 2;
}

/* Solver Factory Service & Messages*/

service SolverFactory {
  rpc ProduceSolver(SolverRequest) returns (SolverReply) { }
}

message SolverRequest {
  /** Implementa le altre caratteristiche di execution context **/
  optional string staticKb = 1;
  optional string dynamicKb = 2;
}

message SolverReply {
  string id = 1;
}


// Liste bloccanti per quando si fanno input-output channel
// Stampe canale output, fa da quel momento in poi o anche prima?

//serializza execution context, opzionale custom data store (conversione in stringa di Any)


